/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package flashcardsJava;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JOptionPane;

/**
 *
 * @author phant
 */
public class FlashCards extends javax.swing.JFrame {

    /**
     * Creates new form FlashCards
     */
    public FlashCards() {
        initComponents();
        this.setTitle("Flashcards");
        createArrays();
        readCards();
        this.QAlabel.setText(cardList.get(0).getFrontInfo());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        QAlabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        WriteButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        AnswerField = new javax.swing.JTextField();
        QuestionField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        NextButton = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();
        LastButton = new javax.swing.JButton();
        FirstButton = new javax.swing.JButton();
        answerCheckBox = new javax.swing.JCheckBox();
        RandomButton = new javax.swing.JButton();
        MarkCheckBox = new javax.swing.JCheckBox();
        MarkedRadioButton = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        QAlabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        QAlabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        QAlabel.setText("Question1");
        QAlabel.setToolTipText("");
        QAlabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        QAlabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                QAlabelMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Write your own questions!");

        WriteButton.setBackground(new java.awt.Color(255, 51, 51));
        WriteButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        WriteButton.setText("Write");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Question:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Answer:");

        AnswerField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        QuestionField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(WriteButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(QuestionField, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                    .addComponent(AnswerField))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(38, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap(37, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(QuestionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(AnswerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(WriteButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        NextButton.setBackground(new java.awt.Color(255, 51, 51));
        NextButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        NextButton.setText("-->");
        NextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextButtonActionPerformed(evt);
            }
        });

        BackButton.setBackground(new java.awt.Color(255, 51, 51));
        BackButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BackButton.setText("<--");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        LastButton.setBackground(new java.awt.Color(255, 51, 51));
        LastButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        LastButton.setText(">>");
        LastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LastButtonActionPerformed(evt);
            }
        });

        FirstButton.setBackground(new java.awt.Color(255, 51, 51));
        FirstButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        FirstButton.setText("<<");
        FirstButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FirstButtonActionPerformed(evt);
            }
        });

        answerCheckBox.setFont(new java.awt.Font("Tahoma", 3, 13)); // NOI18N
        answerCheckBox.setText("Show Answers");

        RandomButton.setBackground(new java.awt.Color(255, 51, 51));
        RandomButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        RandomButton.setText("Random");
        RandomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RandomButtonActionPerformed(evt);
            }
        });


        MarkCheckBox.setFont(new java.awt.Font("Tahoma", 3, 13)); // NOI18N

        MarkCheckBox.setText("Mark Card");
        MarkCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MarkCheckBoxActionPerformed(evt);
            }
        });


        MarkedRadioButton.setFont(new java.awt.Font("Tahoma", 3, 13)); // NOI18N

        MarkedRadioButton.setText("Marked Cards");
        MarkedRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MarkedRadioButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)

                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)

                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(FirstButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BackButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RandomButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NextButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LastButton))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(answerCheckBox)

                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(MarkedRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(MarkCheckBox)))
                .addContainerGap(22, Short.MAX_VALUE))

        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NextButton)
                    .addComponent(BackButton)
                    .addComponent(LastButton)
                    .addComponent(FirstButton)
                    .addComponent(RandomButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)

                    .addComponent(MarkCheckBox)
                    .addComponent(MarkedRadioButton)
                    .addComponent(answerCheckBox))

                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()

                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(QAlabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())

        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(QAlabel, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Like the isFlipped attribute of the Card class, this is false if the question is showing.
    static boolean cardState = false;
    static int position = 0;
    // static String[] QuestionArray = new String[5];
    // static String[] AnswerArray = new String[5];
    static ArrayList<Card> cardList = new ArrayList<Card>();
    static ArrayList<Card> markedCards = new ArrayList<Card>();
    static int counter = 0;

    static FileSystem fs;
    static File file;
    static Path pathToFile;
    static BufferedReader cardReader;
    static InputStream cardin = null;

    public void readCards() {

        fs = FileSystems.getDefault();
        pathToFile = fs.getPath("C:\\Users\\bulba\\OneDrive\\Documents\\GitHub\\Group-2\\Final-Flashcards\\FlashcardsJava\\src\\flashcardsJava\\TestQuestions.txt");

        try {

            cardin = Files.newInputStream(pathToFile);
            cardReader = new BufferedReader(new InputStreamReader(cardin));
        } catch (IOException iOException) {

        }

        String line;
        int lineCounter = 0;
        int cardCounter = 0;

        try {
            while ((line = cardReader.readLine()) != null) {
                lineCounter++;
                if (lineCounter % 2 != 0) {
                    cardCounter++;
                    if (cardList.size() < cardCounter) {
                        cardList.add(new Card());
                    }
                    cardList.get(cardCounter - 1).setFrontInfo("<html>" + line + "</html>");
                } else {
                    cardList.get(cardCounter - 1).setBackInfo("<html>" + line + "</html>");
                }
            }

        } catch (IOException iOException) {

        }

        try {
            cardin.close();
        } catch (IOException ex) {

        }

    }

    private void flipThrough() {
        if (MarkedRadioButton.isSelected()) {

            if (this.answerCheckBox.isSelected()) {
                if (cardState) {
                    // The answer was showing before the label was clicked.
                    cardState = false;
                    this.QAlabel.setText(markedCards.get(counter).getFrontInfo());

                } else {
                    // The question was showing before the label was clicked.
                    cardState = true;
                    //Cycle to the next card if it changes back to the answer.
                    counter++;
                    // If the next card shown would be out of bounds, loop back instead.
                    try {
                        this.QAlabel.setText(markedCards.get(counter).getBackInfo());
                    } catch (IndexOutOfBoundsException abe) {
                        this.QAlabel.setText(markedCards.get(0).getBackInfo());
                        counter = 0;
                    }// End of try-catch.

                }// End of cardState if.

            } else {

                if (cardState) {
                    // The answer was showing before the label was clicked.
                    cardState = false;
                    // When switching back to a question, cycle to the next card.
                    counter++;

                    // Using a try-catch to loop back is surprisingly effective.
                    try {
                        this.QAlabel.setText(markedCards.get(counter).getFrontInfo());
                    } catch (IndexOutOfBoundsException abe) {
                        this.QAlabel.setText(markedCards.get(0).getFrontInfo());
                        counter = 0;
                    }// End of try-catch.

                } else {
                    // The question was showing before the label was clicked.
                    cardState = true;
                    this.QAlabel.setText(markedCards.get(counter).getBackInfo());


                }// End of cardState if.
            }// End of answerCheckBox if.

            this.MarkCheckBox.setSelected(true);
        } else {


            if (this.answerCheckBox.isSelected()) {
                if (cardState) {
                    // The answer was showing before the label was clicked.
                    cardState = false;
                    this.QAlabel.setText(cardList.get(position).getFrontInfo());

                } else {
                    // The question was showing before the label was clicked.
                    cardState = true;
                    //Cycle to the next card if it changes back to the answer.
                    position++;
                    // If the next card shown would be out of bounds, loop back instead.
                    try {
                        this.QAlabel.setText(cardList.get(position).getBackInfo());
                    } catch (IndexOutOfBoundsException abe) {
                        this.QAlabel.setText(cardList.get(0).getBackInfo());
                        position = 0;
                    }// End of try-catch.

                }// End of cardState if.

            } else {

                if (cardState) {
                    // The answer was showing before the label was clicked.
                    cardState = false;
                    // When switching back to a question, cycle to the next card.
                    position++;

                    // Using a try-catch to loop back is surprisingly effective.
                    try {
                        this.QAlabel.setText(cardList.get(position).getFrontInfo());
                    } catch (IndexOutOfBoundsException abe) {
                        this.QAlabel.setText(cardList.get(0).getFrontInfo());
                        position = 0;
                    }// End of try-catch.

                } else {
                    // The question was showing before the label was clicked.
                    cardState = true;
                    this.QAlabel.setText(cardList.get(position).getBackInfo());

                }// End of cardState if.
            }// End of answerCheckBox if.
        }// End of MarkedRadioButton if.

        if (markedCards.contains(cardList.get(position))) {
            this.MarkCheckBox.setSelected(true);
        } else {
            this.MarkCheckBox.setSelected(false);
        }

    }

    public void createArrays() {
        // Will create matching arrays of questions and answers.
        // Initialize class variables here.

        if (cardList.size() == 0) {
            for (int i = 0; i < 5; i++) {
                cardList.add(new Card());
            }
        }

        // Mike ~ "I'm creating a question and answer array separately for testing purposes. Because Evan gave the cards two sides on their own, you only need one."
        // Implemented card class
        // Front of the card is the question, back of the card is the answer
        String testQuestionString = "Question";
        String testAnswerString = "Answer";
        for (int x = 0; x < cardList.size(); x++) {
            cardList.get(x).setFrontInfo(testQuestionString + (x + 1));
            cardList.get(x).setBackInfo(testAnswerString + (x + 1));
        }

    }

    private void WriteButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (this.QuestionField.getText().isEmpty() || this.AnswerField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "There must be both a question and an answer", "Input Error", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Successfully written to cards", "Success", JOptionPane.INFORMATION_MESSAGE);
            String fileName = "C:\\Users\\bulba\\OneDrive\\Documents\\GitHub\\Group-2\\Final-Flashcards\\FlashcardsJava\\src\\flashcardsJava\\TestQuestions.txt";
            File file = new File(fileName);
            try {
                FileWriter fileOut = new FileWriter(file, true);
                fileOut.write("\n" + this.QuestionField.getText());
                fileOut.write("\n" + this.AnswerField.getText());
                fileOut.flush();
                fileOut.close();
            } catch (IOException iOException) {
                System.out.println("Cannot write");
                System.exit(1);
            }
        }
    }


    private void QAlabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_QAlabelMouseClicked
        createArrays();
        readCards();
        flipThrough();

    }//GEN-LAST:event_QAlabelMouseClicked

    private void RandomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RandomButtonActionPerformed
        readCards();
        int random;
        if (MarkedRadioButton.isSelected()) {
            do {
                random = (int) (Math.random() * markedCards.size());
            } while (random == counter);
            counter = random;
            if (this.answerCheckBox.isSelected()) {
                this.QAlabel.setText(markedCards.get(counter).getBackInfo());
            } else {
                this.QAlabel.setText(markedCards.get(counter).getFrontInfo());
            }
            this.MarkCheckBox.setSelected(true);
        } else {
            do {
                random = (int) (Math.random() * cardList.size());
            } while (random == position);
            position = random;

            if (this.answerCheckBox.isSelected()) {
                this.QAlabel.setText(cardList.get(position).getBackInfo());
            } else {
                this.QAlabel.setText(cardList.get(position).getFrontInfo());
            }
        }

        if (markedCards.contains(cardList.get(position))) {
            this.MarkCheckBox.setSelected(true);
        } else {
            this.MarkCheckBox.setSelected(false);
        }
    }//GEN-LAST:event_RandomButtonActionPerformed

    private void FirstButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FirstButtonActionPerformed
        readCards();
        if (MarkedRadioButton.isSelected()) {
            counter = 0;
            if (this.answerCheckBox.isSelected()) {
                this.QAlabel.setText(markedCards.get(counter).getBackInfo());
            } else {
                this.QAlabel.setText(markedCards.get(counter).getFrontInfo());
            }
            this.MarkCheckBox.setSelected(true);
        } else {
            position = 0;
            if (this.answerCheckBox.isSelected()) {
                this.QAlabel.setText(cardList.get(position).getBackInfo());
            } else {
                this.QAlabel.setText(cardList.get(position).getFrontInfo());
            }
        }
        if (markedCards.contains(cardList.get(position))) {
            this.MarkCheckBox.setSelected(true);
        } else {
            this.MarkCheckBox.setSelected(false);
        }
    }//GEN-LAST:event_FirstButtonActionPerformed

    private void NextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextButtonActionPerformed
        readCards();
        if (MarkedRadioButton.isSelected()) {
            if (counter == markedCards.size() - 1) {
                counter = 0;
            } else {
                counter++;
            }
            if (this.answerCheckBox.isSelected()) {
                this.QAlabel.setText(markedCards.get(counter).getBackInfo());
            } else {
                this.QAlabel.setText(markedCards.get(counter).getFrontInfo());
            }
            this.MarkCheckBox.setSelected(true);
        } else {
            if (position == cardList.size() - 1) {
                position = 0;
            } else {
                position++;
            }

            if (this.answerCheckBox.isSelected()) {
                this.QAlabel.setText(cardList.get(position).getBackInfo());
            } else {
                this.QAlabel.setText(cardList.get(position).getFrontInfo());
            }
        }

        if (markedCards.contains(cardList.get(position))) {
            this.MarkCheckBox.setSelected(true);
        } else {
            this.MarkCheckBox.setSelected(false);
        }
    }//GEN-LAST:event_NextButtonActionPerformed

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        readCards();
        if (MarkedRadioButton.isSelected()) {
            if (counter == 0) {
                counter = markedCards.size() - 1;
            } else {
                counter--;
            }
            if (this.answerCheckBox.isSelected()) {
                this.QAlabel.setText(markedCards.get(counter).getBackInfo());
            } else {
                this.QAlabel.setText(markedCards.get(counter).getFrontInfo());
            }
            this.MarkCheckBox.setSelected(true);
        } else {
            if (position == 0) {
                position = cardList.size() - 1;
            } else {
                position--;
            }

            if (this.answerCheckBox.isSelected()) {
                this.QAlabel.setText(cardList.get(position).getBackInfo());
            } else {
                this.QAlabel.setText(cardList.get(position).getFrontInfo());
            }
        }

        if (markedCards.contains(cardList.get(position))) {
            this.MarkCheckBox.setSelected(true);
        } else {
            this.MarkCheckBox.setSelected(false);
        }
    }//GEN-LAST:event_BackButtonActionPerformed

    private void LastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LastButtonActionPerformed
        readCards();
        if (MarkedRadioButton.isSelected()) {
            counter = markedCards.size() - 1;
            if (this.answerCheckBox.isSelected()) {
                this.QAlabel.setText(markedCards.get(counter).getBackInfo());
            } else {
                this.QAlabel.setText(markedCards.get(counter).getFrontInfo());
            }
            this.MarkCheckBox.setSelected(true);
        } else {
            position = cardList.size() - 1;

            if (this.answerCheckBox.isSelected()) {
                this.QAlabel.setText(cardList.get(position).getBackInfo());
            } else {
                this.QAlabel.setText(cardList.get(position).getFrontInfo());
            }
        }

        if (markedCards.contains(cardList.get(position))) {
            this.MarkCheckBox.setSelected(true);
        } else {
            this.MarkCheckBox.setSelected(false);
        }
    }//GEN-LAST:event_LastButtonActionPerformed

    private void MarkCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MarkCheckBoxActionPerformed
        if (MarkCheckBox.isSelected()) {
            markedCards.add(cardList.get(position));
        } else {
            markedCards.remove(position);
        }
    }//GEN-LAST:event_MarkCheckBoxActionPerformed

    private void MarkedRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MarkedRadioButtonActionPerformed

        if (MarkedRadioButton.isSelected()) {
            counter = 0;
            this.QAlabel.setText(markedCards.get(counter).getFrontInfo());
        } else {
            this.QAlabel.setText(cardList.get(position).getFrontInfo());
        }
    }//GEN-LAST:event_MarkedRadioButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FlashCards.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FlashCards.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FlashCards.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FlashCards.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FlashCards().setVisible(true);

            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AnswerField;
    private javax.swing.JButton BackButton;
    private javax.swing.JButton FirstButton;
    private javax.swing.JButton LastButton;
    private javax.swing.JCheckBox MarkCheckBox;
    private javax.swing.JRadioButton MarkedRadioButton;
    private javax.swing.JButton NextButton;
    private javax.swing.JLabel QAlabel;
    private javax.swing.JTextField QuestionField;
    private javax.swing.JButton RandomButton;
    private javax.swing.JButton WriteButton;
    private javax.swing.JCheckBox answerCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
