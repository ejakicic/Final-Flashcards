/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package flashcardsJava;

import java.util.ArrayList;
import javax.swing.Action;

/**
 *
 * @author phant
 */
public class FlashCards extends javax.swing.JFrame {

    /**
     * Creates new form FlashCards
     */
    public FlashCards() {
        initComponents();
        this.setTitle("Flashcards");
        Boolean Markings;
        createArrays();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        QAlabel = new javax.swing.JLabel();
        NextButton = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();
        LastButton = new javax.swing.JButton();
        FirstButton = new javax.swing.JButton();
        answerCheckBox = new javax.swing.JCheckBox();
        RandomButton = new javax.swing.JButton();
        MarkingCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        QAlabel.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        QAlabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        QAlabel.setText("Question1");
        QAlabel.setToolTipText("");
        QAlabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                QAlabelMouseClicked(evt);
            }
        });

        NextButton.setText("-->");
        NextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextButtonActionPerformed(evt);
            }
        });

        BackButton.setText("<--");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        LastButton.setText(">>");
        LastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LastButtonActionPerformed(evt);
            }
        });

        FirstButton.setText("<<");
        FirstButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FirstButtonActionPerformed(evt);
            }
        });

        answerCheckBox.setText("Show Answers");

        RandomButton.setText("Random");
        RandomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RandomButtonActionPerformed(evt);
            }
        });

        MarkingCheckBox.setText("Mark it");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(QAlabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 25, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(FirstButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BackButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(RandomButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(NextButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LastButton)
                                .addGap(52, 52, 52))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(answerCheckBox)
                                .addGap(141, 141, 141))))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(MarkingCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(MarkingCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(QAlabel, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NextButton)
                    .addComponent(BackButton)
                    .addComponent(LastButton)
                    .addComponent(FirstButton)
                    .addComponent(RandomButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(answerCheckBox)
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Like the isFlipped attribute of the Card class, this is false if the question is showing.
    static boolean cardState = false;
    static int position = 0;
    // static String[] QuestionArray = new String[5];
    // static String[] AnswerArray = new String[5];
    static ArrayList<Card> cardList = new ArrayList<Card>();

    private void flipThrough() {
        if (this.answerCheckBox.isSelected()) {

            if (cardState) {
                // The answer was showing before the label was clicked.
                cardState = false;
                this.QAlabel.setText(cardList.get(position).getFrontInfo());

            } else {
                // The question was showing before the label was clicked.
                cardState = true;
                //Cycle to the next card if it changes back to the answer.
                position++;
                // If the next card shown would be out of bounds, loop back instead.
                try {
                    this.QAlabel.setText(cardList.get(position).getBackInfo());
                } catch (ArrayIndexOutOfBoundsException abe) {
                    this.QAlabel.setText(cardList.get(0).getBackInfo());
                    position = 0;
                }// End of try-catch.

            }// End of cardState if.

        } else {

            if (cardState) {
                // The answer was showing before the label was clicked.
                cardState = false;
                // When switching back to a question, cycle to the next card.
                position++;

                // Using a try-catch to loop back is surprisingly effective.
                try {
                    this.QAlabel.setText(cardList.get(position).getFrontInfo());
                } catch (ArrayIndexOutOfBoundsException abe) {
                    this.QAlabel.setText(cardList.get(0).getBackInfo());
                    position = 0;
                }// End of try-catch.

            } else {
                // The question was showing before the label was clicked.
                cardState = true;
                this.QAlabel.setText(cardList.get(position).getBackInfo());

            }// End of cardState if.
        }// End of answerCheckBox if.

    }

    public void createArrays() {
        // Will create matching arrays of questions and answers.
        // Initialize class variables here.
        
        for(int i=0; i<5; i++){
            cardList.add(new Card());
        }

        // Mike ~ "I'm creating a question and answer array separately for testing purposes. Because Evan gave the cards two sides on their own, you only need one."
        // Implemented card class
        // Front of the card is the question, back of the card is the answer
        String testQuestionString = "Question";
        String testAnswerString = "Answer";
        for (int x = 0; x < cardList.size(); x++) {
            cardList.get(x).setFrontInfo(testQuestionString + (x+1));
            cardList.get(x).setBackInfo(testAnswerString + (x+1));
        }

    }

    private void QAlabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_QAlabelMouseClicked
        // Detects the current state of the card.
        // Flips the card.

        createArrays();

        flipThrough();

    }//GEN-LAST:event_QAlabelMouseClicked

    private void NextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextButtonActionPerformed

        if (position == cardList.size() - 1) {
            position = 0;
        } else {
            position++;
        }

        if (this.answerCheckBox.isSelected()) {
            this.QAlabel.setText(cardList.get(position).getBackInfo());
        } else {
            this.QAlabel.setText(cardList.get(position).getFrontInfo());
        }

        if (this.MarkingCheckBox.isSelected()){
            ArrayList<Card> markedCards = new ArrayList<Card>();
            markedCards.add(cardList.get(position));
        }else{
            
        }
    }//GEN-LAST:event_NextButtonActionPerformed

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed

        if (position == 0) {
            position = cardList.size() - 1;
        } else {
            position--;
        }

        if (this.answerCheckBox.isSelected()) {
            this.QAlabel.setText(cardList.get(position).getBackInfo());
        } else {
            this.QAlabel.setText(cardList.get(position).getFrontInfo());
        }

    }//GEN-LAST:event_BackButtonActionPerformed

    private void FirstButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FirstButtonActionPerformed

        position = 0;

        if (this.answerCheckBox.isSelected()) {
            this.QAlabel.setText(cardList.get(position).getBackInfo());
        } else {
            this.QAlabel.setText(cardList.get(position).getFrontInfo());
        }
    }//GEN-LAST:event_FirstButtonActionPerformed

    private void LastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LastButtonActionPerformed

        position = cardList.size() - 1;

        if (this.answerCheckBox.isSelected()) {
            this.QAlabel.setText(cardList.get(position).getBackInfo());
        } else {
            this.QAlabel.setText(cardList.get(position).getFrontInfo());
        }
    }//GEN-LAST:event_LastButtonActionPerformed

    private void RandomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RandomButtonActionPerformed
        position = (int) (Math.random()*cardList.size());
        
        if (this.answerCheckBox.isSelected()) {
            this.QAlabel.setText(cardList.get(position).getBackInfo());
        } else {
            this.QAlabel.setText(cardList.get(position).getFrontInfo());
        }
    }//GEN-LAST:event_RandomButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FlashCards.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FlashCards.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FlashCards.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FlashCards.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FlashCards().setVisible(true);

            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private javax.swing.JButton FirstButton;
    private javax.swing.JButton LastButton;
    private javax.swing.JCheckBox MarkingCheckBox;
    private javax.swing.JButton NextButton;
    private javax.swing.JLabel QAlabel;
    private javax.swing.JButton RandomButton;
    private javax.swing.JCheckBox answerCheckBox;
    // End of variables declaration//GEN-END:variables
}
